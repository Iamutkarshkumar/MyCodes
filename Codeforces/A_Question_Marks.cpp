// ⡤⢂⠀⡤⠂⠤⢀⠠⡠⢔⠤⡢⠔⢀⠀⡀⢀⠀⡀⢀⢀⢀⢀⢀⢀⠀⡄⢀⠄⡠⢀⠄⢄⠄⢄⠄⡄⢄⠤⠠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⠤⡤⡠⠲⡲⢲⢲⡄⠲⡲⡲⡲⣖⢤⠀⡠⢀
// ⠂⢡⢪⠊⠐⠐⠄⠑⡜⢢⢓⠌⡢⠁⠢⢀⢕⠅⡨⠂⡴⢡⡂⠅⠢⡁⠪⡐⢅⢘⠄⡣⢈⠎⡰⢁⠎⡰⡁⡣⢊⠢⡢⡑⢢⢊⠢⡊⢔⠡⡊⢔⠡⡊⢔⠡⡪⡐⢅⠳⡨⡂⡣⢊⠚⢔⠥⡉⢎⠱⡝⣌⠪⡫⣞⢜⢗⣕⢌⠢
// ⢡⢣⡓⠈⡨⢀⠑⡀⠝⢐⠁⡐⠠⡁⠡⡸⠌⡰⢀⢏⡪⡒⢁⠜⠐⢌⢜⠕⢄⠣⡈⢆⠑⡌⢢⠑⡌⢢⠘⡄⢣⠑⠔⠡⡣⢨⠊⡜⠰⡡⡑⢅⠣⢊⠜⡰⢡⢊⠆⢕⢌⢌⠪⡨⡑⢅⢪⢘⢌⠲⡨⢢⡑⢜⠪⡳⡕⡱⣇⠜
// ⢕⢕⠂⡐⢀⠂⡐⢀⠊⡠⢈⠐⠄⢂⠐⡁⠢⢐⠈⢔⠕⢈⠄⡊⢌⢢⡫⡑⢜⠡⡈⢆⠑⡌⢢⠑⡌⢢⠑⡨⢂⠕⠈⡀⠊⢆⠕⡌⢪⠂⠎⡀⢂⠈⢪⠐⡕⠰⡑⡱⢠⢃⠕⡌⢪⠢⡑⢔⠡⡃⢆⠕⡌⡪⢊⢆⠳⡨⡚⣎
// ⢪⡊⠀⠔⢀⠐⠠⠂⡐⠄⠄⠡⠐⡁⠌⡠⠑⡠⠑⠠⢊⠠⢊⠐⠄⡳⠌⢢⠈⢆⠑⢌⠢⡑⠔⡡⢊⠢⠐⡅⠢⠐⠠⠈⠄⠑⡌⢢⠡⡉⠐⠠⠀⢅⠀⠣⡊⡪⡐⠨⡢⡑⢌⠪⢢⢑⢌⠢⡃⡪⢢⠘⡔⡑⢕⢌⢎⢜⢌⠵
// ⣕⠀⡁⠢⠀⡡⢈⠐⠄⠨⡀⠅⡨⠐⠠⠂⠢⠐⡁⠑⢄⠑⢄⠑⢌⠨⡂⡑⢌⠂⡑⢌⠢⡘⠔⡡⠊⡀⠪⡨⢀⠁⢂⠁⠌⠠⠘⡄⠣⠀⢅⠈⠂⠄⠨⡀⢪⠐⡍⠄⠰⡡⡑⢅⠣⡢⡈⢎⢌⠢⡑⢅⠪⡘⢔⠱⡐⢕⢌⠎
// ⡃⠠⠐⡀⠁⠄⡠⠈⠄⡡⠀⠢⢀⠅⢊⢈⠂⡡⢈⠌⢂⠌⢄⠑⠔⡐⢌⠰⡀⠄⠪⡠⢑⠌⡢⢘⠀⡐⡱⠀⢄⠈⠄⣄⣑⡐⣄⣘⢀⣅⡄⢌⣐⢁⣂⠐⡀⢣⢊⢂⠁⡐⢅⠱⡑⢔⠂⠄⢕⠱⡨⢢⠘⢌⢢⢑⠍⢦⢑⢕
// ⠀⠂⠡⢀⠁⠂⠄⠌⡐⠠⠈⡂⠐⠄⠢⢀⠅⡐⠄⡂⠡⠂⡂⢑⠌⡰⠠⡡⠀⠨⢂⠜⡠⢊⠔⠁⠠⡈⢆⡱⢢⢫⢪⡮⣫⡻⡼⣝⡽⣪⢯⡫⡷⡱⢌⠧⡹⠠⡅⢅⠐⡀⠡⢣⢘⢄⠣⠐⠈⢆⠕⡌⡂⠨⡢⡑⢕⢡⢣⣘
// ⠀⡁⠢⢀⠈⠂⠌⠠⠐⠐⠄⠨⡈⢐⠁⠔⠠⠂⢌⠠⢑⠀⡊⠔⡐⢄⢑⠀⡀⠑⢄⠱⡠⢑⠌⠠⠁⡌⢢⡱⡱⣡⢟⢾⣕⢟⣞⢮⡻⣮⡳⣝⢾⣕⢕⢕⡹⡂⠪⠢⠐⡀⡁⠢⡑⢌⠪⠀⢅⠘⢔⠌⡪⠀⠔⡡⢣⢑⠆⢮
// ⠀⡀⠂⠄⢈⠐⠈⠄⠑⡀⢑⠀⡂⠠⢁⠌⢂⠑⠠⢂⠁⠠⡈⡂⠢⢂⠁⠠⠀⡌⢂⠑⡄⠱⡀⠂⡎⡐⢜⢔⠕⣮⣫⢗⣝⢷⡹⣳⢝⡮⡻⣮⡳⣝⡆⢧⢪⣑⢉⠪⡀⠔⠀⠂⢱⠈⡎⢐⠀⠂⠱⡈⢎⠐⡁⠸⡐⣅⠣⣓
// ⠀⠠⠈⠄⠠⠈⠄⠑⠠⠐⡀⠢⠀⢂⠂⠔⠀⠌⢂⠡⠂⠐⠄⡊⡐⡁⢁⠐⠀⡇⠨⡂⠜⡐⠠⢀⢇⠈⣎⠪⣺⢕⢷⣝⢮⡳⣝⢗⢯⣞⢽⡪⣟⢼⣣⠣⡣⡪⢐⠅⣪⠀⡁⠡⠈⡪⡐⡁⢈⠌⠀⢇⠱⡁⠌⠠⢣⢘⢌⢎
// ⠐⠀⠂⠀⠐⡈⢀⠑⡀⢐⠀⠂⠀⡂⢈⠂⡀⢑⠠⠂⠐⠀⢊⠄⢌⠐⡀⠐⢀⢗⠨⡐⠅⢌⠀⢸⠂⠅⡎⡕⣽⡹⣧⣫⢗⡽⣪⢏⡷⣹⡳⣝⢮⡳⣽⡘⡜⣪⠐⢅⢪⡂⠄⠑⡀⠢⢌⠠⠂⠠⡁⢘⠔⡁⠌⢂⠢⡱⢌⠦
// ⠀⠀⠂⠈⢀⠐⡀⢂⠀⠄⡈⢀⠁⠄⠡⡀⠀⠢⠐⡁⠈⡀⠂⠢⠂⠅⠀⠌⢐⢕⠐⢌⠢⢁⠀⣕⢃⠊⣎⢪⡞⣵⢣⡯⣳⢝⡮⣳⢝⡮⡻⣮⡳⣝⢮⡳⡸⢔⠡⡁⠳⠢⢈⠐⡀⢂⠑⡄⢈⠐⠠⡀⠣⠌⡠⠁⠔⢨⢂⡓
// ⠀⠐⠀⠄⢀⠐⠠⠀⠄⠠⠀⠄⠀⠨⡀⠄⠈⠠⡁⠄⠠⠀⡈⠌⢊⠄⠁⠄⢸⡨⡃⠔⡁⢂⠀⡎⢵⠈⡦⢱⢯⡺⣕⢯⡺⣕⢯⡺⣕⢯⡻⣜⡽⣪⢗⡽⠈⣠⠂⢰⣇⢫⡂⠐⠠⢀⠅⣝⠀⠌⡐⢀⠱⡁⢄⠡⠑⢄⢣⡑
// ⠀⠠⠀⠠⠀⠄⠁⠄⢀⠐⠀⠂⠈⠠⠐⠀⡈⢀⠂⠐⠀⠂⢰⠈⡐⠄⢈⠀⢰⠑⠧⠈⡂⢐⢀⣉⣌⡀⡁⠹⣣⢟⡼⣣⢟⡼⣣⢟⡼⣳⢝⡮⣞⢵⡫⣶⢩⠆⢌⡺⣵⡡⡣⢈⠐⠄⢰⠱⡂⠂⠔⠠⠂⠢⡀⡊⡐⠡⢢⠑
// ⠠⠀⠂⠀⠄⡈⠠⠀⠀⠄⠠⠈⠀⠄⠁⠄⢀⠀⠅⢈⠀⡁⠜⢅⠐⡀⠂⠐⢰⢑⢿⡄⡑⠠⠀⡦⣻⠄⡝⣸⢧⡻⣜⢧⡻⣜⢧⡻⣜⢧⡻⣜⢷⣝⢮⡳⡱⠑⢄⣛⣘⣊⢪⠀⢂⠂⢸⡱⡱⠈⢄⠑⡈⢂⠔⢈⠌⡊⢔⠡
// ⠀⢀⠀⠂⠀⠄⠠⠀⠁⠀⠄⠐⠀⠄⠁⠠⠀⡀⠂⠄⠠⠀⡫⡊⢆⠠⢁⠈⠰⡑⢏⢚⡐⠐⡀⡣⡙⢧⢘⢜⡧⣻⢜⡧⣻⢜⡧⣻⢜⡧⣻⢜⡧⣫⢗⢕⡕⢡⡯⣳⢝⡵⡱⡅⠠⢁⡮⢢⢝⠀⠢⡈⠄⠢⢈⠂⢌⠢⡑⠠
// ⡠⣆⠏⠀⠠⠀⠄⠀⡁⠐⠀⠐⠀⠂⢈⠀⠄⢀⠐⠀⠂⠠⡣⢹⡌⡂⢀⠂⠨⡪⣫⢗⡽⣄⠀⣳⢜⡪⡆⣹⢎⡷⣹⢎⡷⣹⢎⡷⣹⢎⡷⡹⣮⢳⣝⣝⠇⠼⠓⠙⠃⠛⠐⠁⡂⠸⢇⡣⡃⡌⢂⠔⢁⠁⡂⠢⠈⢆⠅⡈
// ⡗⠌⠀⡀⠠⠀⠐⠀⢀⠐⠀⡁⢠⡛⡠⢦⡀⠄⢀⠁⡈⢀⢇⢪⢞⡌⢆⠀⡁⠎⠷⠹⠎⠞⠆⠸⢧⡻⣺⢌⡷⣹⢎⡷⣹⢎⡷⣹⢎⢷⣝⢽⡪⣗⢵⠅⠀⠔⠠⡊⠄⣸⣩⡣⠐⢠⢾⢌⢜⡂⠢⠂⢂⠨⠀⢂⠁⢎⠠⠀
// ⢋⡠⠎⠀⠀⠐⠀⠁⡐⠁⠔⡨⢘⢆⢳⡑⣝⢄⠠⠀⠄⠀⡇⡱⠝⠊⠈⠀⠠⠀⢄⠄⡄⠄⢰⠤⡤⣀⠳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢧⡻⣎⢷⡹⡮⡆⠁⡔⡈⠾⣻⣯⣻⡇⣢⢟⣳⡃⡗⢀⠑⡈⠄⠠⢁⠐⠀⠅⠠⠀
// ⡧⣙⢠⢔⠃⢀⢼⡀⠐⡡⠑⢄⢜⡕⡱⡕⣕⢳⠀⠄⡈⠀⢪⢄⣄⠐⠄⠑⡀⢂⠀⠢⣨⣆⣟⢷⣳⡜⣗⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢞⠷⡮⣎⠵⡴⡻⣚⢷⡹⣳⢝⡮⡪⠂⠄⠡⠀⠄⠡⠀⠌⠠⠁⢂⠀
// ⡗⢜⠦⣃⢴⡙⢦⡃⠀⠢⠑⣌⢎⢮⢘⢎⢮⣁⢛⢖⡀⠁⠰⡂⢮⠳⡮⣤⡐⠖⡪⢂⡭⣮⡻⡷⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢯⡺⣭⢻⢮⢯⡝⣷⡹⣳⢝⡎⠂⠐⡈⢀⠊⢀⠂⢁⠐⢀⠂⠄⠀
// ⢏⠪⠊⠆⠣⠊⠢⡉⢀⠃⡜⢔⢕⡕⢱⢕⢵⡡⢇⢝⢮⡀⠈⢎⢜⢝⢮⢲⢭⡫⣝⢵⢕⢖⢞⢮⡺⣕⢽⡪⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⡫⣮⢻⣜⣝⢷⡹⡇⠈⢀⠂⡀⢂⠀⢂⠀⠂⠠⠀⠂⠀
// ⠂⠠⢁⠈⡀⢁⠐⠀⠐⢜⠌⡧⢣⢝⢸⢪⢲⡱⢩⢎⢮⡢⡂⠰⡁⢯⡪⡳⣕⢽⡸⡣⣯⡹⣣⢏⡞⣮⢳⡝⣮⢳⡝⣮⢳⡝⣮⢳⡝⣮⠱⣫⢞⡵⣫⢞⡵⣫⢞⡵⣝⠷⡵⣝⢷⣝⠢⠐⠀⠄⠠⠀⠂⠠⠈⠀⠂⡀⢁⠠
// ⠠⠁⠠⠂⠠⠀⠄⢁⠐⠠⡑⢈⢣⡣⡱⢕⢕⢭⢪⡚⢦⡫⢸⡂⢱⡘⢎⢗⢵⡣⡻⣜⢦⡫⣎⢷⡹⣪⢳⡝⡮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡐⢝⢮⡳⣝⢮⡳⣝⢮⡺⣎⢟⣞⢵⡳⣝⢐⠀⠌⠀⠂⢁⠈⠠⠀⠁⠄⠠⠀⡀
// ⠄⠡⠈⢄⠁⡂⠐⠠⠀⠂⢌⠐⠄⢕⠸⡱⡱⡣⢸⢕⢕⡝⡄⢫⢕⢝⢎⢗⢵⡹⣪⢺⡪⡞⡼⣕⢝⢮⢳⢝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡣⡑⣹⢎⡷⣹⢎⡷⣹⢎⡷⣹⢎⡷⣹⠆⡅⠠⠀⡁⠂⡀⠐⢀⠈⠀⠂⠠⠀⠀
// ⠂⢈⠐⠄⢌⠠⠑⠠⡈⢀⠀⠕⢈⠢⢑⠁⢏⢺⣂⢳⢱⢍⢞⡄⢳⡙⣎⢳⢕⢵⡱⣣⡫⡺⣪⢎⣗⢝⡕⡯⡺⣪⢎⣗⢝⢮⡳⣝⢮⡳⡅⡪⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡎⠠⡈⢄⠠⠀⠄⠀⠂⠀⠄⢁⠐⠀⡈⠀
// ⡁⠀⠔⠐⢄⠡⡑⠐⠄⠂⢀⠨⠂⠡⢊⠄⢅⠑⢎⢎⢕⢕⢕⢝⢤⠹⣌⢗⢕⢧⠳⣕⢝⢮⡪⡮⣪⢳⡹⣪⢫⢮⣣⡫⡳⣕⢝⢮⡳⣝⡢⣻⢜⢧⡫⣞⢵⡫⣞⢵⡫⣞⢵⠋⠈⢦⠂⠔⡁⡑⡈⠢⠢⠠⡀⡀⠀⠁⠠⠀
// ⠀⡈⢀⢁⠐⠀⠈⠀⠠⠀⡀⠀⢑⠈⠢⡨⡀⢣⢈⠪⣂⠣⡫⡪⡣⣣⠘⣎⢳⡱⡫⡪⡳⡕⡵⡹⣜⢵⡹⡜⡧⡳⣕⢝⢮⡪⡳⣕⢽⡜⣵⢹⢎⢷⡹⣎⢷⡹⣎⢷⡹⣎⠇⢈⢂⠈⢧⠐⠄⠌⢄⢑⠈⡢⠈⠔⠑⢂⠆⡨
// ⢆⠊⠂⠁⠀⠈⠀⠁⢀⠀⠄⠀⠀⠡⡈⠔⡐⠄⡑⢄⠑⢆⠨⠪⡪⡪⡳⡀⠳⣱⣙⢎⢞⢜⢎⢗⠵⣕⢝⢮⢺⢕⡝⡮⣣⢻⢜⢮⡺⣪⢎⢷⡹⣎⢷⡹⣎⢷⡹⣎⠗⠁⢀⠂⢄⢁⠘⢧⡈⠂⠢⠠⡁⠔⢁⠅⡑⠄⡊⠠
// ⠀⠀⠀⠄⠀⡁⠈⠀⠀⠠⠀⠀⠁⠀⠀⢂⠌⠢⡈⠔⡡⠊⠄⡣⢈⠮⡪⡹⡱⣄⠣⡫⣪⢣⡫⣪⢳⢕⡝⣎⢗⢵⡹⣪⡣⣫⢳⡕⣝⢎⢷⢕⡝⡮⡳⣝⢮⡳⡝⢌⠪⠀⡐⢀⠂⠄⠂⠱⣕⠌⡐⠐⠄⠊⠠⠂⢌⠐⡈⠢
// ⠀⠈⠀⠄⠠⠀⠠⠀⠁⠐⠀⠁⠀⠈⠀⠀⠀⡑⠄⢊⢄⠑⡅⠰⡁⢆⠘⡪⡪⣪⢓⢵⡡⡓⢵⢱⢕⢧⡫⣪⢳⢕⠵⣑⢭⡪⡥⣝⢜⢧⡣⡯⣪⣛⢮⡪⡳⢑⢌⢪⡑⠀⠐⠄⠨⡀⢑⠀⢑⣗⠀⠅⠨⠈⠄⡑⠠⠈⠄⡑
// ⢀⠈⠀⠀⠄⠀⠀⠄⠈⡂⠀⢀⠈⠀⠀⠁⠀⠐⠡⢂⠔⠡⡘⢐⠌⢄⠣⡐⠡⢓⢕⢕⢕⡝⡲⣅⡓⠵⡱⡕⢧⡫⡳⡕⡵⡹⡪⣎⢷⡱⡝⣮⢪⢎⢷⢉⠔⡅⡣⢢⡑⠈⡀⠊⡀⠔⠀⡡⠀⢸⡣⡈⢐⠁⢂⠐⡈⢐⠐⠄
// ⠀⠀⠈⢀⠀⠈⢀⠀⠠⡁⠀⠀⠀⠀⠁⠀⠂⠈⠀⠡⡈⠢⡈⠢⡈⠢⢂⢅⢑⠡⠱⡍⡮⡪⣪⢪⣙⢝⢦⣙⠪⣎⡳⡹⣜⢝⢮⢪⢎⢞⢮⡪⡳⠝⡠⡃⢕⢌⠪⡢⡁⠆⠐⠠⠐⡀⠡⠀⠌⡀⢱⡣⡀⠌⡀⠢⢀⢁⠐⡈
// ⠀⠈⠀⢀⠀⠁⠀⡀⠀⡕⠀⠈⠀⠐⠀⠠⠀⠀⠐⠀⡂⡁⠨⠂⠌⠢⠡⡠⢁⢊⠢⡘⢜⡪⡲⡱⡕⣕⢕⡕⡽⢤⡋⢮⡪⡳⡱⣣⢫⡳⣕⠝⡈⢎⠔⡡⢃⠎⡜⡰⡁⡅⢈⠐⠠⠀⠌⠐⠠⠐⠀⢯⡢⠐⠀⠢⢀⠂⠐⠠
// ⠀⠁⢀⠀⡀⠐⠀⢀⠀⠆⠀⠀⠄⠀⡀⠀⠀⠂⠀⠀⠢⢈⠐⡁⡁⠑⠔⡠⢁⠢⢑⠐⡄⢑⠭⡪⡪⡪⡪⡪⡺⢜⢮⡢⡹⡜⡵⡱⣕⠳⡈⢔⠱⡈⢎⢌⠪⡘⢔⢌⢢⡇⠀⠄⠡⢀⠡⢈⠀⢊⠀⠘⡮⡂⢁⠂⡐⠀⡡⠈
// ⠀⠄⠀⢀⠀⠀⠂⠀⠀⡑⠀⠐⠀⠀⠀⠀⠂⠀⠈⠀⠐⠠⡁⠔⠈⠢⡈⠐⢄⠑⢄⢑⢈⠂⠆⢌⠪⢪⢕⢝⢜⢕⡕⡵⡱⡌⢌⠌⢌⢔⢁⠢⡑⢌⠢⡡⢃⠪⡢⡑⣼⡃⠀⠂⡐⠀⠄⠂⠠⠁⠠⠁⠸⣕⠄⠐⡀⠐⠀⠌
// ⠀⠀⠂⠀⡀⠐⠀⠁⠀⡑⠀⠀⠂⠀⠀⠂⠀⠠⠀⠠⠀⠐⠠⠈⠌⠂⡈⠔⠠⠈⠢⠠⡁⢊⠌⡂⡑⢄⢊⠑⢕⠧⡺⡸⡪⡺⢀⠜⡰⢐⠅⡱⡈⢆⠱⡈⢎⠢⡑⣜⢷⡣⠈⠀⠄⠈⠄⠈⠄⠈⠄⡈⠀⢳⢕⡈⠀⡈⠄⠡
// ⠀⠂⠐⠀⠀⠀⠀⠂⠀⡘⡀⠈⠀⠐⠀⠀⡀⠀⠀⠀⠀⠠⠀⢀⠀⢀⢏⠲⡡⡈⢂⠢⢈⠂⠢⡈⠔⡠⢁⠕⢄⡑⠉⡮⣪⠃⡔⢡⠊⡔⢡⠢⡑⢌⠂⡕⢌⠪⣰⢏⡷⡳⠀⢁⠈⠄⠈⠄⡈⠐⠠⠀⡁⠈⡮⣱⠀⡀⢂⠐
// ⠀⠄⢀⠀⠁⠀⠂⠈⠀⠨⡀⠀⡈⠀⠐⠀⠀⠀⠐⠀⠠⠀⠄⠀⠠⡢⡣⣙⢜⢌⠳⡔⣄⡑⠄⢌⠢⢐⠡⢐⠄⢢⢝⢜⠮⠐⡡⢊⠔⡑⢢⠘⢔⠡⡑⠈⠢⣑⢾⣕⢯⣻⠀⠀⠄⠂⠁⠠⠀⠌⠀⠂⠐⡀⠸⣌⢇⠀⠄⠂

// #include <bits/stdc++.h>
// using namespace std;
// #define gc getchar_unlocked
// #define fo(i, n) for (i = 0; i < n; i++)
// #define Fo(i, k, n) for (i = k; k < n ? i < n : i > n; k < n ? i += 1 : i -= 1)
// #define ll long long
// #define deb(x) cout << #x << "=" << x << endl
// #define pb push_back
// #define mp make_pair
// #define F first
// #define S second
// #define all(x) x.begin(), x.end()
// #define clr(x) memset(x, false, sizeof(x))
// #define sortall(x) sort(all(x))
// #define tr(it, a) for (auto it = a.begin(); it != a.end(); it++)
// #define PI 3.1415926535897932384626
// #define mod 1000000007
// typedef pair<int, int> pii;
// typedef pair<ll, ll> pl;
// typedef vector<int> vi;
// typedef vector<ll> vl;
// typedef vector<pii> vpii;
// typedef vector<pl> vpl;
// typedef vector<vi> vvi;
// typedef vector<vl> vvl;
// int main(){
//     int t;
//     cin>>t;
//     while(t--){
//         int n;cin>>n;
//         string s;
//         cin>>s;
//         int a=0,b=0,c=0,d=0,x=0;
//         for(int i=0;i<s.length();i++){
//             if(s[i]=='A') a++;
//             if(s[i]=='B') b++;
//             if(s[i]=='C') c++;
//             if(s[i]=='D') d++;
//             if(s[i]=='?') x++;
//         }

//         int ans=0;
//         if(a>=n) ans+=n;
//         if(b>=n) ans+=n;
//         if(c>=n) ans+=n;
//         if(d>=n) ans+=n;
//         if(a<n) ans+=a;
//         if(b<n) ans+=b;
//         if(c<n) ans+=c;
//         if(d<n) ans+=d;

//         cout<<ans<<endl;


//     }
// }
// #include <iostream>
// #include <vector>
// #include <algorithm>

// using namespace std;

// int main() {
//     int t;
//     cin >> t;
    
//     while (t--) {
//         int n;
//         cin >> n;
//         string s;
//         cin >> s;
        
//         // Count occurrences of 'A', 'B', 'C', 'D', and '?'
//         int countA = 0, countB = 0, countC = 0, countD = 0, countQuestionMarks = 0;
        
//         for (char ch : s) {
//             if (ch == 'A') countA++;
//             else if (ch == 'B') countB++;
//             else if (ch == 'C') countC++;
//             else if (ch == 'D') countD++;
//             else if (ch == '?') countQuestionMarks++;
//         }
        
//         // Calculate the number of answers we need for each option
//         int missingA = max(0, n - countA);
//         int missingB = max(0, n - countB);
//         int missingC = max(0, n - countC);
//         int missingD = max(0, n - countD);
        
//         // Calculate the maximum correct answers by filling '?' optimally
//         int totalMissing = missingA + missingB + missingC + missingD;
//         int possibleCorrectAnswers = min(countQuestionMarks, totalMissing);
        
//         int maxCorrectAnswers = countA + countB + countC + countD + possibleCorrectAnswers;
        
//         cout << maxCorrectAnswers << endl;
//     }
    
//     return 0;
// }
#include <bits/stdc++.h>
using namespace std;

void solve() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    
    unordered_map<char, int> countMap;
    for (char ch : s) {
        countMap[ch]++;
    }

    int ans = 0;
    vector<char> chars = {'A', 'B', 'C', 'D'};
    for (char ch : chars) {
        if (countMap[ch] >= n) {
            ans += n;
        } else {
            ans += countMap[ch];
        }
    }

    cout << ans << endl;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}


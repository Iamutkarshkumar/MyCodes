// ⡤⢂⠀⡤⠂⠤⢀⠠⡠⢔⠤⡢⠔⢀⠀⡀⢀⠀⡀⢀⢀⢀⢀⢀⢀⠀⡄⢀⠄⡠⢀⠄⢄⠄⢄⠄⡄⢄⠤⠠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⡠⢄⠤⠤⡤⡠⠲⡲⢲⢲⡄⠲⡲⡲⡲⣖⢤⠀⡠⢀
// ⠂⢡⢪⠊⠐⠐⠄⠑⡜⢢⢓⠌⡢⠁⠢⢀⢕⠅⡨⠂⡴⢡⡂⠅⠢⡁⠪⡐⢅⢘⠄⡣⢈⠎⡰⢁⠎⡰⡁⡣⢊⠢⡢⡑⢢⢊⠢⡊⢔⠡⡊⢔⠡⡊⢔⠡⡪⡐⢅⠳⡨⡂⡣⢊⠚⢔⠥⡉⢎⠱⡝⣌⠪⡫⣞⢜⢗⣕⢌⠢
// ⢡⢣⡓⠈⡨⢀⠑⡀⠝⢐⠁⡐⠠⡁⠡⡸⠌⡰⢀⢏⡪⡒⢁⠜⠐⢌⢜⠕⢄⠣⡈⢆⠑⡌⢢⠑⡌⢢⠘⡄⢣⠑⠔⠡⡣⢨⠊⡜⠰⡡⡑⢅⠣⢊⠜⡰⢡⢊⠆⢕⢌⢌⠪⡨⡑⢅⢪⢘⢌⠲⡨⢢⡑⢜⠪⡳⡕⡱⣇⠜
// ⢕⢕⠂⡐⢀⠂⡐⢀⠊⡠⢈⠐⠄⢂⠐⡁⠢⢐⠈⢔⠕⢈⠄⡊⢌⢢⡫⡑⢜⠡⡈⢆⠑⡌⢢⠑⡌⢢⠑⡨⢂⠕⠈⡀⠊⢆⠕⡌⢪⠂⠎⡀⢂⠈⢪⠐⡕⠰⡑⡱⢠⢃⠕⡌⢪⠢⡑⢔⠡⡃⢆⠕⡌⡪⢊⢆⠳⡨⡚⣎
// ⢪⡊⠀⠔⢀⠐⠠⠂⡐⠄⠄⠡⠐⡁⠌⡠⠑⡠⠑⠠⢊⠠⢊⠐⠄⡳⠌⢢⠈⢆⠑⢌⠢⡑⠔⡡⢊⠢⠐⡅⠢⠐⠠⠈⠄⠑⡌⢢⠡⡉⠐⠠⠀⢅⠀⠣⡊⡪⡐⠨⡢⡑⢌⠪⢢⢑⢌⠢⡃⡪⢢⠘⡔⡑⢕⢌⢎⢜⢌⠵
// ⣕⠀⡁⠢⠀⡡⢈⠐⠄⠨⡀⠅⡨⠐⠠⠂⠢⠐⡁⠑⢄⠑⢄⠑⢌⠨⡂⡑⢌⠂⡑⢌⠢⡘⠔⡡⠊⡀⠪⡨⢀⠁⢂⠁⠌⠠⠘⡄⠣⠀⢅⠈⠂⠄⠨⡀⢪⠐⡍⠄⠰⡡⡑⢅⠣⡢⡈⢎⢌⠢⡑⢅⠪⡘⢔⠱⡐⢕⢌⠎
// ⡃⠠⠐⡀⠁⠄⡠⠈⠄⡡⠀⠢⢀⠅⢊⢈⠂⡡⢈⠌⢂⠌⢄⠑⠔⡐⢌⠰⡀⠄⠪⡠⢑⠌⡢⢘⠀⡐⡱⠀⢄⠈⠄⣄⣑⡐⣄⣘⢀⣅⡄⢌⣐⢁⣂⠐⡀⢣⢊⢂⠁⡐⢅⠱⡑⢔⠂⠄⢕⠱⡨⢢⠘⢌⢢⢑⠍⢦⢑⢕
// ⠀⠂⠡⢀⠁⠂⠄⠌⡐⠠⠈⡂⠐⠄⠢⢀⠅⡐⠄⡂⠡⠂⡂⢑⠌⡰⠠⡡⠀⠨⢂⠜⡠⢊⠔⠁⠠⡈⢆⡱⢢⢫⢪⡮⣫⡻⡼⣝⡽⣪⢯⡫⡷⡱⢌⠧⡹⠠⡅⢅⠐⡀⠡⢣⢘⢄⠣⠐⠈⢆⠕⡌⡂⠨⡢⡑⢕⢡⢣⣘
// ⠀⡁⠢⢀⠈⠂⠌⠠⠐⠐⠄⠨⡈⢐⠁⠔⠠⠂⢌⠠⢑⠀⡊⠔⡐⢄⢑⠀⡀⠑⢄⠱⡠⢑⠌⠠⠁⡌⢢⡱⡱⣡⢟⢾⣕⢟⣞⢮⡻⣮⡳⣝⢾⣕⢕⢕⡹⡂⠪⠢⠐⡀⡁⠢⡑⢌⠪⠀⢅⠘⢔⠌⡪⠀⠔⡡⢣⢑⠆⢮
// ⠀⡀⠂⠄⢈⠐⠈⠄⠑⡀⢑⠀⡂⠠⢁⠌⢂⠑⠠⢂⠁⠠⡈⡂⠢⢂⠁⠠⠀⡌⢂⠑⡄⠱⡀⠂⡎⡐⢜⢔⠕⣮⣫⢗⣝⢷⡹⣳⢝⡮⡻⣮⡳⣝⡆⢧⢪⣑⢉⠪⡀⠔⠀⠂⢱⠈⡎⢐⠀⠂⠱⡈⢎⠐⡁⠸⡐⣅⠣⣓
// ⠀⠠⠈⠄⠠⠈⠄⠑⠠⠐⡀⠢⠀⢂⠂⠔⠀⠌⢂⠡⠂⠐⠄⡊⡐⡁⢁⠐⠀⡇⠨⡂⠜⡐⠠⢀⢇⠈⣎⠪⣺⢕⢷⣝⢮⡳⣝⢗⢯⣞⢽⡪⣟⢼⣣⠣⡣⡪⢐⠅⣪⠀⡁⠡⠈⡪⡐⡁⢈⠌⠀⢇⠱⡁⠌⠠⢣⢘⢌⢎
// ⠐⠀⠂⠀⠐⡈⢀⠑⡀⢐⠀⠂⠀⡂⢈⠂⡀⢑⠠⠂⠐⠀⢊⠄⢌⠐⡀⠐⢀⢗⠨⡐⠅⢌⠀⢸⠂⠅⡎⡕⣽⡹⣧⣫⢗⡽⣪⢏⡷⣹⡳⣝⢮⡳⣽⡘⡜⣪⠐⢅⢪⡂⠄⠑⡀⠢⢌⠠⠂⠠⡁⢘⠔⡁⠌⢂⠢⡱⢌⠦
// ⠀⠀⠂⠈⢀⠐⡀⢂⠀⠄⡈⢀⠁⠄⠡⡀⠀⠢⠐⡁⠈⡀⠂⠢⠂⠅⠀⠌⢐⢕⠐⢌⠢⢁⠀⣕⢃⠊⣎⢪⡞⣵⢣⡯⣳⢝⡮⣳⢝⡮⡻⣮⡳⣝⢮⡳⡸⢔⠡⡁⠳⠢⢈⠐⡀⢂⠑⡄⢈⠐⠠⡀⠣⠌⡠⠁⠔⢨⢂⡓
// ⠀⠐⠀⠄⢀⠐⠠⠀⠄⠠⠀⠄⠀⠨⡀⠄⠈⠠⡁⠄⠠⠀⡈⠌⢊⠄⠁⠄⢸⡨⡃⠔⡁⢂⠀⡎⢵⠈⡦⢱⢯⡺⣕⢯⡺⣕⢯⡺⣕⢯⡻⣜⡽⣪⢗⡽⠈⣠⠂⢰⣇⢫⡂⠐⠠⢀⠅⣝⠀⠌⡐⢀⠱⡁⢄⠡⠑⢄⢣⡑
// ⠀⠠⠀⠠⠀⠄⠁⠄⢀⠐⠀⠂⠈⠠⠐⠀⡈⢀⠂⠐⠀⠂⢰⠈⡐⠄⢈⠀⢰⠑⠧⠈⡂⢐⢀⣉⣌⡀⡁⠹⣣⢟⡼⣣⢟⡼⣣⢟⡼⣳⢝⡮⣞⢵⡫⣶⢩⠆⢌⡺⣵⡡⡣⢈⠐⠄⢰⠱⡂⠂⠔⠠⠂⠢⡀⡊⡐⠡⢢⠑
// ⠠⠀⠂⠀⠄⡈⠠⠀⠀⠄⠠⠈⠀⠄⠁⠄⢀⠀⠅⢈⠀⡁⠜⢅⠐⡀⠂⠐⢰⢑⢿⡄⡑⠠⠀⡦⣻⠄⡝⣸⢧⡻⣜⢧⡻⣜⢧⡻⣜⢧⡻⣜⢷⣝⢮⡳⡱⠑⢄⣛⣘⣊⢪⠀⢂⠂⢸⡱⡱⠈⢄⠑⡈⢂⠔⢈⠌⡊⢔⠡
// ⠀⢀⠀⠂⠀⠄⠠⠀⠁⠀⠄⠐⠀⠄⠁⠠⠀⡀⠂⠄⠠⠀⡫⡊⢆⠠⢁⠈⠰⡑⢏⢚⡐⠐⡀⡣⡙⢧⢘⢜⡧⣻⢜⡧⣻⢜⡧⣻⢜⡧⣻⢜⡧⣫⢗⢕⡕⢡⡯⣳⢝⡵⡱⡅⠠⢁⡮⢢⢝⠀⠢⡈⠄⠢⢈⠂⢌⠢⡑⠠
// ⡠⣆⠏⠀⠠⠀⠄⠀⡁⠐⠀⠐⠀⠂⢈⠀⠄⢀⠐⠀⠂⠠⡣⢹⡌⡂⢀⠂⠨⡪⣫⢗⡽⣄⠀⣳⢜⡪⡆⣹⢎⡷⣹⢎⡷⣹⢎⡷⣹⢎⡷⡹⣮⢳⣝⣝⠇⠼⠓⠙⠃⠛⠐⠁⡂⠸⢇⡣⡃⡌⢂⠔⢁⠁⡂⠢⠈⢆⠅⡈
// ⡗⠌⠀⡀⠠⠀⠐⠀⢀⠐⠀⡁⢠⡛⡠⢦⡀⠄⢀⠁⡈⢀⢇⢪⢞⡌⢆⠀⡁⠎⠷⠹⠎⠞⠆⠸⢧⡻⣺⢌⡷⣹⢎⡷⣹⢎⡷⣹⢎⢷⣝⢽⡪⣗⢵⠅⠀⠔⠠⡊⠄⣸⣩⡣⠐⢠⢾⢌⢜⡂⠢⠂⢂⠨⠀⢂⠁⢎⠠⠀
// ⢋⡠⠎⠀⠀⠐⠀⠁⡐⠁⠔⡨⢘⢆⢳⡑⣝⢄⠠⠀⠄⠀⡇⡱⠝⠊⠈⠀⠠⠀⢄⠄⡄⠄⢰⠤⡤⣀⠳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢧⡻⣎⢷⡹⡮⡆⠁⡔⡈⠾⣻⣯⣻⡇⣢⢟⣳⡃⡗⢀⠑⡈⠄⠠⢁⠐⠀⠅⠠⠀
// ⡧⣙⢠⢔⠃⢀⢼⡀⠐⡡⠑⢄⢜⡕⡱⡕⣕⢳⠀⠄⡈⠀⢪⢄⣄⠐⠄⠑⡀⢂⠀⠢⣨⣆⣟⢷⣳⡜⣗⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢞⠷⡮⣎⠵⡴⡻⣚⢷⡹⣳⢝⡮⡪⠂⠄⠡⠀⠄⠡⠀⠌⠠⠁⢂⠀
// ⡗⢜⠦⣃⢴⡙⢦⡃⠀⠢⠑⣌⢎⢮⢘⢎⢮⣁⢛⢖⡀⠁⠰⡂⢮⠳⡮⣤⡐⠖⡪⢂⡭⣮⡻⡷⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢯⡺⣭⢻⢮⢯⡝⣷⡹⣳⢝⡎⠂⠐⡈⢀⠊⢀⠂⢁⠐⢀⠂⠄⠀
// ⢏⠪⠊⠆⠣⠊⠢⡉⢀⠃⡜⢔⢕⡕⢱⢕⢵⡡⢇⢝⢮⡀⠈⢎⢜⢝⢮⢲⢭⡫⣝⢵⢕⢖⢞⢮⡺⣕⢽⡪⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⡫⣮⢻⣜⣝⢷⡹⡇⠈⢀⠂⡀⢂⠀⢂⠀⠂⠠⠀⠂⠀
// ⠂⠠⢁⠈⡀⢁⠐⠀⠐⢜⠌⡧⢣⢝⢸⢪⢲⡱⢩⢎⢮⡢⡂⠰⡁⢯⡪⡳⣕⢽⡸⡣⣯⡹⣣⢏⡞⣮⢳⡝⣮⢳⡝⣮⢳⡝⣮⢳⡝⣮⠱⣫⢞⡵⣫⢞⡵⣫⢞⡵⣝⠷⡵⣝⢷⣝⠢⠐⠀⠄⠠⠀⠂⠠⠈⠀⠂⡀⢁⠠
// ⠠⠁⠠⠂⠠⠀⠄⢁⠐⠠⡑⢈⢣⡣⡱⢕⢕⢭⢪⡚⢦⡫⢸⡂⢱⡘⢎⢗⢵⡣⡻⣜⢦⡫⣎⢷⡹⣪⢳⡝⡮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡐⢝⢮⡳⣝⢮⡳⣝⢮⡺⣎⢟⣞⢵⡳⣝⢐⠀⠌⠀⠂⢁⠈⠠⠀⠁⠄⠠⠀⡀
// ⠄⠡⠈⢄⠁⡂⠐⠠⠀⠂⢌⠐⠄⢕⠸⡱⡱⡣⢸⢕⢕⡝⡄⢫⢕⢝⢎⢗⢵⡹⣪⢺⡪⡞⡼⣕⢝⢮⢳⢝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⡣⡑⣹⢎⡷⣹⢎⡷⣹⢎⡷⣹⢎⡷⣹⠆⡅⠠⠀⡁⠂⡀⠐⢀⠈⠀⠂⠠⠀⠀
// ⠂⢈⠐⠄⢌⠠⠑⠠⡈⢀⠀⠕⢈⠢⢑⠁⢏⢺⣂⢳⢱⢍⢞⡄⢳⡙⣎⢳⢕⢵⡱⣣⡫⡺⣪⢎⣗⢝⡕⡯⡺⣪⢎⣗⢝⢮⡳⣝⢮⡳⡅⡪⡮⣳⢝⡮⣳⢝⡮⣳⢝⡮⣳⢝⡎⠠⡈⢄⠠⠀⠄⠀⠂⠀⠄⢁⠐⠀⡈⠀
// ⡁⠀⠔⠐⢄⠡⡑⠐⠄⠂⢀⠨⠂⠡⢊⠄⢅⠑⢎⢎⢕⢕⢕⢝⢤⠹⣌⢗⢕⢧⠳⣕⢝⢮⡪⡮⣪⢳⡹⣪⢫⢮⣣⡫⡳⣕⢝⢮⡳⣝⡢⣻⢜⢧⡫⣞⢵⡫⣞⢵⡫⣞⢵⠋⠈⢦⠂⠔⡁⡑⡈⠢⠢⠠⡀⡀⠀⠁⠠⠀
// ⠀⡈⢀⢁⠐⠀⠈⠀⠠⠀⡀⠀⢑⠈⠢⡨⡀⢣⢈⠪⣂⠣⡫⡪⡣⣣⠘⣎⢳⡱⡫⡪⡳⡕⡵⡹⣜⢵⡹⡜⡧⡳⣕⢝⢮⡪⡳⣕⢽⡜⣵⢹⢎⢷⡹⣎⢷⡹⣎⢷⡹⣎⠇⢈⢂⠈⢧⠐⠄⠌⢄⢑⠈⡢⠈⠔⠑⢂⠆⡨
// ⢆⠊⠂⠁⠀⠈⠀⠁⢀⠀⠄⠀⠀⠡⡈⠔⡐⠄⡑⢄⠑⢆⠨⠪⡪⡪⡳⡀⠳⣱⣙⢎⢞⢜⢎⢗⠵⣕⢝⢮⢺⢕⡝⡮⣣⢻⢜⢮⡺⣪⢎⢷⡹⣎⢷⡹⣎⢷⡹⣎⠗⠁⢀⠂⢄⢁⠘⢧⡈⠂⠢⠠⡁⠔⢁⠅⡑⠄⡊⠠
// ⠀⠀⠀⠄⠀⡁⠈⠀⠀⠠⠀⠀⠁⠀⠀⢂⠌⠢⡈⠔⡡⠊⠄⡣⢈⠮⡪⡹⡱⣄⠣⡫⣪⢣⡫⣪⢳⢕⡝⣎⢗⢵⡹⣪⡣⣫⢳⡕⣝⢎⢷⢕⡝⡮⡳⣝⢮⡳⡝⢌⠪⠀⡐⢀⠂⠄⠂⠱⣕⠌⡐⠐⠄⠊⠠⠂⢌⠐⡈⠢
// ⠀⠈⠀⠄⠠⠀⠠⠀⠁⠐⠀⠁⠀⠈⠀⠀⠀⡑⠄⢊⢄⠑⡅⠰⡁⢆⠘⡪⡪⣪⢓⢵⡡⡓⢵⢱⢕⢧⡫⣪⢳⢕⠵⣑⢭⡪⡥⣝⢜⢧⡣⡯⣪⣛⢮⡪⡳⢑⢌⢪⡑⠀⠐⠄⠨⡀⢑⠀⢑⣗⠀⠅⠨⠈⠄⡑⠠⠈⠄⡑
// ⢀⠈⠀⠀⠄⠀⠀⠄⠈⡂⠀⢀⠈⠀⠀⠁⠀⠐⠡⢂⠔⠡⡘⢐⠌⢄⠣⡐⠡⢓⢕⢕⢕⡝⡲⣅⡓⠵⡱⡕⢧⡫⡳⡕⡵⡹⡪⣎⢷⡱⡝⣮⢪⢎⢷⢉⠔⡅⡣⢢⡑⠈⡀⠊⡀⠔⠀⡡⠀⢸⡣⡈⢐⠁⢂⠐⡈⢐⠐⠄
// ⠀⠀⠈⢀⠀⠈⢀⠀⠠⡁⠀⠀⠀⠀⠁⠀⠂⠈⠀⠡⡈⠢⡈⠢⡈⠢⢂⢅⢑⠡⠱⡍⡮⡪⣪⢪⣙⢝⢦⣙⠪⣎⡳⡹⣜⢝⢮⢪⢎⢞⢮⡪⡳⠝⡠⡃⢕⢌⠪⡢⡁⠆⠐⠠⠐⡀⠡⠀⠌⡀⢱⡣⡀⠌⡀⠢⢀⢁⠐⡈
// ⠀⠈⠀⢀⠀⠁⠀⡀⠀⡕⠀⠈⠀⠐⠀⠠⠀⠀⠐⠀⡂⡁⠨⠂⠌⠢⠡⡠⢁⢊⠢⡘⢜⡪⡲⡱⡕⣕⢕⡕⡽⢤⡋⢮⡪⡳⡱⣣⢫⡳⣕⠝⡈⢎⠔⡡⢃⠎⡜⡰⡁⡅⢈⠐⠠⠀⠌⠐⠠⠐⠀⢯⡢⠐⠀⠢⢀⠂⠐⠠
// ⠀⠁⢀⠀⡀⠐⠀⢀⠀⠆⠀⠀⠄⠀⡀⠀⠀⠂⠀⠀⠢⢈⠐⡁⡁⠑⠔⡠⢁⠢⢑⠐⡄⢑⠭⡪⡪⡪⡪⡪⡺⢜⢮⡢⡹⡜⡵⡱⣕⠳⡈⢔⠱⡈⢎⢌⠪⡘⢔⢌⢢⡇⠀⠄⠡⢀⠡⢈⠀⢊⠀⠘⡮⡂⢁⠂⡐⠀⡡⠈
// ⠀⠄⠀⢀⠀⠀⠂⠀⠀⡑⠀⠐⠀⠀⠀⠀⠂⠀⠈⠀⠐⠠⡁⠔⠈⠢⡈⠐⢄⠑⢄⢑⢈⠂⠆⢌⠪⢪⢕⢝⢜⢕⡕⡵⡱⡌⢌⠌⢌⢔⢁⠢⡑⢌⠢⡡⢃⠪⡢⡑⣼⡃⠀⠂⡐⠀⠄⠂⠠⠁⠠⠁⠸⣕⠄⠐⡀⠐⠀⠌
// ⠀⠀⠂⠀⡀⠐⠀⠁⠀⡑⠀⠀⠂⠀⠀⠂⠀⠠⠀⠠⠀⠐⠠⠈⠌⠂⡈⠔⠠⠈⠢⠠⡁⢊⠌⡂⡑⢄⢊⠑⢕⠧⡺⡸⡪⡺⢀⠜⡰⢐⠅⡱⡈⢆⠱⡈⢎⠢⡑⣜⢷⡣⠈⠀⠄⠈⠄⠈⠄⠈⠄⡈⠀⢳⢕⡈⠀⡈⠄⠡
// ⠀⠂⠐⠀⠀⠀⠀⠂⠀⡘⡀⠈⠀⠐⠀⠀⡀⠀⠀⠀⠀⠠⠀⢀⠀⢀⢏⠲⡡⡈⢂⠢⢈⠂⠢⡈⠔⡠⢁⠕⢄⡑⠉⡮⣪⠃⡔⢡⠊⡔⢡⠢⡑⢌⠂⡕⢌⠪⣰⢏⡷⡳⠀⢁⠈⠄⠈⠄⡈⠐⠠⠀⡁⠈⡮⣱⠀⡀⢂⠐
// ⠀⠄⢀⠀⠁⠀⠂⠈⠀⠨⡀⠀⡈⠀⠐⠀⠀⠀⠐⠀⠠⠀⠄⠀⠠⡢⡣⣙⢜⢌⠳⡔⣄⡑⠄⢌⠢⢐⠡⢐⠄⢢⢝⢜⠮⠐⡡⢊⠔⡑⢢⠘⢔⠡⡑⠈⠢⣑⢾⣕⢯⣻⠀⠀⠄⠂⠁⠠⠀⠌⠀⠂⠐⡀⠸⣌⢇⠀⠄⠂

#include <bits/stdc++.h>
using namespace std;
#define gc getchar_unlocked
#define fo(i, n) for (i = 0; i < n; i++)
#define Fo(i, k, n) for (i = k; k < n ? i < n : i > n; k < n ? i += 1 : i -= 1)
#define ll long long
#define deb(x) cout << #x << "=" << x << endl
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(x) memset(x, false, sizeof(x))
#define sortall(x) sort(all(x))
#define tr(it, a) for (auto it = a.begin(); it != a.end(); it++)
#define PI 3.1415926535897932384626
#define mod 1000000007
typedef pair<int, int> pii;
typedef pair<ll, ll> pl;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pii> vpii;
typedef vector<pl> vpl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
vector<int> helper(int n, vector<int>& b) {
    vector<int> a(n);
    a[0] = b[0];
    a[n-1] = b[n-2];
    
    for (int i = 1; i < n-1; i++) {
        a[i] = b[i-1] | b[i];
    }
    for (int i = 0; i < n-1; i++) {
        if ((a[i] & a[i+1]) != b[i]) {
            return {-1}; 
        }
    }
    return a;
}
int main(){
    int t;
    cin>>t;
    while(t--){
        int n;cin>>n;
        vector<int> b(n-1);
        for (int i = 0; i < n-1; i++) {
            cin >> b[i];
        }
        vector<int> a;
        // a[0] = b[0];
        // a[n-1] = b[n-2];
        // for (int i = 1; i < n-1; ++i) a[i] = b[i-1] | b[i];
        a=helper(n,b);
        if (a.size() == 1 ) cout << -1 <<endl;
        else if (a[0] == -1) cout << -1 <<endl;
        else {
            for (int i = 0; i < n; i++) {
                if (i > 0) cout << " ";
                cout << a[i];
            }
            cout <<endl;
        }
    
    

        
    }
}
// #include <iostream>
// #include <vector>
// using namespace std;

// vector<int> constructGoodArray(int n, const vector<int>& b) {
//     vector<int> a(n);
//     a[0] = b[0];
//     a[n-1] = b[n-2];
    
//     for (int i = 1; i < n-1; ++i) {
//         a[i] = b[i-1] | b[i];
//     }

//     // Validate the array
//     for (int i = 0; i < n-1; ++i) {
//         if ((a[i] & a[i+1]) != b[i]) {
//             return {-1}; // Invalid array
//         }
//     }
//     return a;
// }

// int main() {
//     int t;
//     cin >> t;
//     while (t--) {
//         int n;
//         cin >> n;
//         vector<int> b(n-1);
//         for (int i = 0; i < n-1; ++i) {
//             cin >> b[i];
//         }

//         vector<int> result = constructGoodArray(n, b);
//         if (result.size() == 1 && result[0] == -1) {
//             cout << -1 <<endl;
//         } 
//         else {
//             for (int i = 0; i < n; ++i) {
//                 if (i > 0) cout << " ";
//                 cout << result[i];
//             }
//             cout <<endl;
//         }
//     }
//     return 0;
// }
